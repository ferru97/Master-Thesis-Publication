const manager = artifacts.require('RequestManager')
const ocr = artifacts.require("OffchainAggregator")
const ac = artifacts.require("AccessController")
const Operator = artifacts.require('Operator')
const { LinkToken } = require('@chainlink/contracts/truffle/v0.4/LinkToken')


const OPERATOR_JOB = "0x142ff8885ecb4152a44969de0b419e9e00000000000000000000000000000000" //DR-SC job id
const DATA_FETCH_COST = "1000000000000000000" //Cost of a DR request
const LINK_ADDRESS = "0x3746268504dC7CBc86588c1e8920D31e30d671aa" // address of the contract maanging the LINK token

//Oracles transmitting and signing addresses
const transmit_address = ["0x502690dA6dA7bc6e0942E7bBad5be272C1a764C5","0x71448C1897FF60821e9F45587DaA9Db05E767Bcd","0xeaEccbF989735EcB4f883094637FCF26E80284a1","0x2Be2Ba2996e0F4eD0bfDC9476c04811bc08c780a","0x35E86089a1EA9BC6a6eeAD55DC57D00E4f7a4D28","0x6BDfa71d13d860701aE14f0d6a0BDc533ba61010","0xe44d322b670aa1190c2906332b095e44Cc7fC0B3","0x064bf8E3f5e3466B3256907CA0b2240379ed1Bfe","0xf4A5B3cbe74BE7c47190C5d2F0E2A9c5b6ED8fC8","0xAA7964FDac7bd564078FccB614B22757F786E851"]
const signing_address = ["0xd26E59B2b9A74Bd2102882c70dEA5272151b2B5e","0x713c938405D4Dfe8Ab379486966D7A783C62dDd4","0x27C76d069683e68d52090d4f88311AB66Cb986F1","0x1FfCa14E5977c5526E2aBCbFeD486a93fB0961a2","0x99640fEd0F703403B5b324a64BB4323bA10C6729","0x256c68145ECD78F8A350F8C1D72802caC316c871","0x849b94f84f39050bb0DDd121e6817a1852caBc26","0x80a6057725E4FaE5c625caD995ab53c8755aD654","0x6a968f4f41Ce44e7dbae61E3A0C0A5301AB184F7","0x8Fd050242CF5fE0Ac7A76676594ef464d765d127"]
const threshold = 1
const encVersion = 1
// _encoded field generated with the encodeGenerator tool
const encoded = "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000006fc23ac0000000000000000000000000000000000000000000000000000000004a817c80000000000000000000000000000000000000000000000000000000004a817c80000000000000000000000000000000000000000000000000000000000773594000000000000000000000000000000000000000000000000007fffffffffffffff000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000002540be4000000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000004400000000000000000000000000000000000000000000000000000000000000680000000000000000000000000000000000000000000000000000000000000000aa8ed243cdcc1163cb6dc6b07b2e8fb3453ff45edb22f39402791772fb66bdaabcd7fca11d83df0ea0585dad87d8719c6e8d26a92ca208e9618d4508e8fedf9f5160c82d77744a42558516fd9631956b013c1da7038408c77a7c169f156da805e9b1ea0ddfd986caa23fe393f7704b9c4c24f88f0147b2155fa0f84b147099347081149736827a342e6757ede0e10369e3957a64f161d594f277df83d85344727c1249cbf01af1f522d2447b6a1c07c44a1c6793bfa638e774e1375e54857cfcea7101af17d5679ed12bd6870cae638f833a6e53e327ecab441bc656e55595e857ce870733a0f22c5dfd7a643adb8b4b8520b6bfbc53c4557726ce65611e3d75939619ac997c1388a00525b3f37549366cc93d6fe6c1eb0f3314b0b34552e053b7722595edc5159152f964e1302ab39fd316276942a529c0e9e2daf77a942495dd0000000000000000000000000000000000000000000000000000000000000211313244334b6f6f57454369326b4d6234445652364a37364d63565a416f4151323375736b7a39516131487267327669356e4451462c313244334b6f6f574e314645646169546a5164454741795a39475537377551367a397779764548354235796b775a6559794d736d2c313244334b6f6f574c506b7075473858764b4a67457963316955666e327373454b676642726d334b5242524e715969734e7345362c313244334b6f6f574b6a467235595759644e74656a364668775241714e7a69336d4a6d514838445a61344276424d6369457553772c313244334b6f6f574831556b706b513958746b423648687a6a506567684141713951346f4e7179413639714758316f69634564312c313244334b6f6f57426f724147777a426376797a764e776f726771743357416f504253376d794d794c464b666d7a5371485939372c313244334b6f6f5751465a6236746b665465526766587a6a316a6872524139414d35584d423678554d757852637971536b7144432c313244334b6f6f574a55723250476f6f616d65536f434539365a33365254613753664d32666964646678556679774c66774a6a782c313244334b6f6f5746355876477a58546277697a656a3766725961573836364566706252734b4c787074675669364c3570796f732c313244334b6f6f5744795168454d4e3959736e6471376e4544637767315a56653254776d46756837487336773636755843697836000000000000000000000000000000806176c7a1c96e2a61b6ce253d7d10087d072187805c37e763295cd165e3433e6595fbd530e4258a407562b78db33f55e840b69c37b5afd03e5ba1ff6aec30f30000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000abaee0f92e262dfb25dff0cf88eb874410000000000000000000000000000000092f0f59abd9025f325d52f92ff56e03300000000000000000000000000000000f6ad9498f46448ed111ebd2c18256a9b00000000000000000000000000000000b35353f480f35d17f6aa629acffcc183000000000000000000000000000000000b67fee7734bcbbe77b20459d77340f0000000000000000000000000000000002ed20cb2fadf01adecb5c9c56c14121500000000000000000000000000000000c00bd828e01f40a228ba4a7e610478bf00000000000000000000000000000000201fd5c11bf20a990ef2fbb0887efdd7000000000000000000000000000000003b6ab6c49ee135cfc8459def64a9648c000000000000000000000000000000003b5ac1c3367033947ce93f4dfd824e0c00000000000000000000000000000000"
const maxReqTime = 120
const LINKperWei = 190

// OCR-SC constructor parameters
const ocr_conf = {
  "decimals": 5,
  "maximumGasPrice": 3000,
  "reasonableGasPrice": 100,
  "microLinkPerEth": 128900000,
  "linkGweiPerObservation": 2000000000,
  "linkGweiPerTransmission": 100000000,
  "minAnswer": 0,
  "maxAnswer": 10,
  "description": "OCR test"

}

module.exports = async (deployer, network, [defaultAccount]) => {
  try {
    manager.setProvider(deployer.provider)
    ocr.setProvider(deployer.provider)
    ac.setProvider(deployer.provider)
    LinkToken.setProvider(deployer.provider)
    Operator.setProvider(deployer.provider)

    var link_cnt = await LinkToken.at(LINK_ADDRESS)

    var dr_dep = await deployer.deploy(Operator, LINK_ADDRESS, defaultAccount, { from: defaultAccount })
    var operator_cnt = await Operator.deployed()
    var fun1 = await operator_cnt.setAuthorizedSenders(transmit_address ,{from: defaultAccount})

    var reqmanager_dep = await deployer.deploy(manager, DATA_FETCH_COST, operator_cnt.address, OPERATOR_JOB, LINK_ADDRESS,  { from: defaultAccount })
    var manager_cnt = await manager.deployed()
    
    await deployer.deploy(ac, { from: defaultAccount })
    var ac_cnt = await ac.deployed()

    var fun2 = await ac_cnt.addAccess(manager_cnt.address, { from: defaultAccount })
    var fun3 = await ac_cnt.addAccess(defaultAccount, { from: defaultAccount })

    var ocr_dep = await deployer.deploy(ocr, ocr_conf["maximumGasPrice"],ocr_conf["reasonableGasPrice"],ocr_conf["microLinkPerEth"],
    ocr_conf["linkGweiPerObservation"],ocr_conf["linkGweiPerTransmission"],LINK_ADDRESS,ocr_conf["minAnswer"],
    ocr_conf["maxAnswer"],ac_cnt.address,ac_cnt.address,ocr_conf["decimals"],ocr_conf["description"], { from: defaultAccount })
    var ocr_cnt = await ocr.deployed()

    var fun5 = await ocr_cnt.setMaxrequestLinkTonken("15500000000000000000", { from: defaultAccount })
    var fun6 = await ocr_cnt.setPayees(transmit_address,transmit_address, { from: defaultAccount })
    var fun7 = await ocr_cnt.setConfig(signing_address,transmit_address,threshold,encVersion,encoded, { from: defaultAccount })
    var fun8 = await ocr_cnt.setRequestManager(manager_cnt.address, { from: defaultAccount })

    var fun9 = await manager_cnt.setOCRcontract(ocr_cnt.address, { from: defaultAccount })
    var fun10 = await manager_cnt.setMaxReqTime(maxReqTime, { from: defaultAccount })

    await link_cnt.approve(manager_cnt.address, "150000000000000000000", { from: defaultAccount });

    console.log("---------CONTRACTS ADDRESSES---------")
    console.log("ReqManger        : ",manager_cnt.address)
    console.log("OCR              : ",ocr_cnt.address)
    console.log("DR address:      : ",operator_cnt.address)

    var reqManager_gas = parseInt((await web3.eth.getTransactionReceipt(reqmanager_dep.transactionHash)).gasUsed) + fun9.receipt.gasUsed + fun10.receipt.gasUsed
    var dr_gas = parseInt((await web3.eth.getTransactionReceipt(dr_dep.transactionHash)).gasUsed) + fun1.receipt.gasUsed
    var ocr_gas = parseInt((await web3.eth.getTransactionReceipt(ocr_dep.transactionHash)).gasUsed) + fun5.receipt.gasUsed + fun6.receipt.gasUsed + fun7.receipt.gasUsed + fun8.receipt.gasUsed
    
    console.log("---------GAS ESTIMATION---------")
    console.log("ReqManger        : ",reqManager_gas)
    console.log("OCR              : ",ocr_gas)
    console.log("DR              : ",dr_gas)

  } catch (err) {
    console.error(err)
  }
}
